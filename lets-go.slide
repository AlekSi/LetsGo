Let's Go, или введение в Go

Алексей Палажченко


* Наша группа

- [[https://www.meetup.com/Golang-Moscow][meetup.com/Golang-Moscow]]
- [[https://groups.google.com/forum/#!forum/golang-ru][golang-ru @ Google Groups]]
- [[https://golang-ru.slack.com/][golang-ru.slack.com]]
- [[http://4gophers.ru/slack][Вход в Slack]]

.image lets-go/button.png


* Hello world!

.play lets-go/hello.go

	go run hello.go

.image lets-go/frontpage.png


* Hello HTTP/1.1!

.play lets-go/hello-server.go


* Что это?

- открытый проект
- 2 компилятора (gc, gcc) + другие проекты
- сверх-быстрая компиляция (stdlib – 9 секунд)
- объектно-ориентированный, но лёгкий
- статически и сильно типизированный, явное приведение типов (int, int32, int64)
- сборщик мусора
- горутины (лёгкие нити) и каналы
- инструменты (race detector!)
- … и ничего нового (с точки зрения науки)

.image lets-go/project.png


* Кто все эти люди?

.image lets-go/team.png

…, Роберт Гризмер, Роб Пайк, Кен Томпсон, Эндрю Герранд, Брэд Фицпатрик


* Зачем?

«Back around September 2007, I was doing some minor but central work on an enormous Google C++ program, one you've all interacted with, and my compilations were taking about 45 minutes on our huge distributed compile cluster», – Роб Пайк.

- быстрее
- проще
- эффективнее
- масштабируемее

.image lets-go/logo.png


* Для кого?

Роб Пайк:

«Although we expected C++ programmers to see Go as an alternative, instead most Go programmers come from languages like Python and Ruby. Very few come from C++.»

«Python and Ruby programmers come to Go because they don't have to surrender much expressiveness, but gain performance and get to play with concurrency.»

.image lets-go/talks.png


* Основы синтаксиса


* Пакеты, импорты, экспортируемые имена

.play lets-go/hello-exported.go


* Определения

.play lets-go/defs.go


* Константы

.play lets-go/consts.go


* Типы

- bool
- string (неизменяемые)
- int, int8, int16, int32, int64
- uint, uint8, uint16, uint32, uint64
- uintptr
- byte (синоним для uint8)
- rune (синоним int32, Unicode code point)
- float32, float64
- complex64, complex128

.image lets-go/ref.png


* Ещё типы

- Массивы
- Срезы (slices)
- Ассоциативные массивы (maps)
- Структуры
- Указатели
- Каналы
- Функции и методы

.image lets-go/ref.png


* Массивы

.play lets-go/arrays.go


* Слайсы

.play lets-go/slices.go


* Ассоциативные массивы

.play lets-go/maps.go


* Структуры

.play lets-go/structs.go


* Embedded структуры

.play lets-go/embed.go


* Указатели

.play lets-go/pointers.go


* for, range, if и else

.play lets-go/if.go


* switch, case, default и fallthrough

.play lets-go/switch.go


* Функции и интерфейсы


* Функции и аргументы

.play lets-go/functions.go


* Замыкания

.play lets-go/closures.go


* Методы

.play lets-go/methods.go


* Embedded структуры и методы

.play lets-go/methods2.go


* Интерфейсы

.play lets-go/interfaces.go


* Интерфейсы

.play lets-go/interfaces2.go /START OMIT/,/END OMIT/


* Стандартные интерфейсы

	type error interface {
		Error() string
	}

	type Reader interface {
		Read(p []byte) (n int, err error)
	}

	type Writer interface {
		Write(p []byte) (n int, err error)
	}

	r := os.Open("input.txt")
	w := os.OpenFile("output.txt", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	io.Copy(w, r)


* Приведение к интерфейсу

	func Copy(dst Writer, src Reader) (written int64, err error) {
		if rt, ok := dst.(ReaderFrom); ok {
			return rt.ReadFrom(src)
		}

		if wt, ok := src.(WriterTo); ok {
			return wt.WriteTo(dst)
		}

		// используем dst.Write() и src.Read()


* Пустой интерфейс

	func Printf(format string, a ...interface{})

	C: void*
	Java: Object


* error и defer

.play lets-go/defer.go


* DON'T PANIC!

.play lets-go/recover.go

.image lets-go/help.png


* Concurrency


* Теория

Concurrency is not parallelism.

Do not communicate by sharing memory; instead share memory by communicating.


* Горутины

.play lets-go/goroutines.go


* Каналы

.play lets-go/channels.go


* Закрытие канала

.play lets-go/close.go


* Выбор канала

.play lets-go/select.go


* Но есть и…

- sync.Mutex, sync.RWMutex
- sync.Cond
- sync.WaitGroup
- sync/atomic.AddUint64
- sync/atomic.CompareAndSwapUint64
- … и подобное


* Crawler


* Get

.code lets-go/crawler.go /GET OMIT/,/PARSE OMIT/


* Parse

.code lets-go/crawler.go /PARSE OMIT/,/PARSE 1 OMIT/


* Parse

.code lets-go/crawler.go /PARSE 1 OMIT/,/CRAWLER OMIT/


* Crawler

.code lets-go/crawler.go /CRAWLER OMIT/,/PARSER OMIT/


* Parser

.code lets-go/crawler.go /PARSER OMIT/,/MAIN OMIT/


* Всё вместе

.play lets-go/crawler.go /MAIN OMIT/,


* Спасибо

Алексей Палажченко / [[https://twitter.com/paaleksey][@paaleksey]] / [[https://github.com/AlekSi][github.com/AlekSi]]

- [[https://www.meetup.com/Golang-Moscow][meetup.com/Golang-Moscow]]
- [[https://groups.google.com/forum/#!forum/golang-ru][golang-ru @ Google Groups]]
- [[https://golang-ru.slack.com/][golang-ru.slack.com]]
- [[http://4gophers.ru/slack][Вход в Slack]]

.image lets-go/mascot.gif
